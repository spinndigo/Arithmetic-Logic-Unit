/*
Joseph Spinosa

This is the ALU module which utilizes the following operations: ADD, SUB, ROTATE, XOR, OR, and AND.
The overall skeleton of the ALU is an 8-bit 8:1 mux
Remember for the muxes, the first tier uses the LSB of the select line

Kyle Hasset helped me debug the muxes to have them sync up with the correct inputs

As a legend:
A: N/A         D: SUB       G: OR
B: XOR         E: N/A       H: ADD
C: AND         F: ROT       
*/

module ALU;

reg[7:0] Ai,Bi; // these are the inputs to the entire module. They will undergo every operation
reg[2:0] SB; // the select line(s)
wire[7:0] A,B,C,D,E,F,G,H;// these are the inputs to the first tier of 8-bit 2:1 muxes. They are the outputs of each op
wire[7:0] OUT; // The final output of the module

addrsub Add(Ai, Bi, 0, A);
addrsub Sub(Ai, Bi, 1, B);
Rotateshifter Rot(Ai, Bi[2:0], C); // only need the first three low order bits of Bi

assign G = Ai; // just pass Ai through 
assign D = Ai ^ Bi; //the XOR 
assign F = Ai & Bi; // the AND
assign H = Ai; // just pass Ai through
assign E = Ai | Bi; // the OR

bigmux operation(A,B,C,D,E,F,G,H,SB,OUT); // the overall operation

initial
   begin
     $monitor($time,,"Ai=%b, Bi=%b, SB=%b, OUT=%b",Ai,Bi,SB, OUT);
   
  #10 Ai=8'b00011001; Bi=8'b00011110; SB=3'b000;
  #10 Ai=8'b00011110; Bi=8'b00011001; SB=3'b001;
  #10 Ai=8'b00001010; Bi=8'b00000101; SB=3'b010;
  #10 Ai=8'b00001111; Bi=8'b00000011; SB=3'b011;
  #10 Ai=8'b00011111; Bi=8'b00001100; SB=3'b101;
  #10 Ai=8'b00001100; Bi=8'b00000101; SB=3'b100;
  #10 $finish;
   end
endmodule

module addrsub(a,b,c_in,sum);

input[7:0] a,b;
input c_in; // this will also act as select line for all 2:1 muxes 1 means subtract
wire[7:0] m_out; // the output of each mux aka the "b" for each FA
output[7:0] sum;
wire c_out; //this is wasted?

simplemux m0(b[0], !b[0], c_in, m_out[0]);
simplemux m1(b[1], !b[1], c_in, m_out[1]);
simplemux m2(b[2], !b[2], c_in, m_out[2]);
simplemux m3(b[3], !b[3], c_in, m_out[3]);
simplemux m4(b[4], !b[4], c_in, m_out[4]);
simplemux m5(b[5], !b[5], c_in, m_out[5]);
simplemux m6(b[6], !b[6], c_in, m_out[6]);
simplemux m7(b[7], !b[7], c_in, m_out[7]);

RCA addrsub (a,m_out,c_in,sum,c_out);

endmodule

module RCA(a,b,c_in,sum,c_out);
  
input  c_in;
input [7:0] a,b;
output [7:0] sum;
output c_out;
wire[7:0] FA_out;
     
fulladd FA0  (a[0], b[0], c_in, sum[0], FA_out[0]);
fulladd FA1  (a[1], b[1], FA_out[0], sum[1], FA_out[1]);
fulladd FA2  (a[2], b[2], FA_out[1], sum[2], FA_out[2]);
fulladd FA3  (a[3], b[3], FA_out[2], sum[3], FA_out[3]);
fulladd FA4  (a[4], b[4],FA_out[3] , sum[4], FA_out[4]);
fulladd FA5  (a[5], b[5], FA_out[4], sum[5], FA_out[5]);
fulladd FA6  (a[6], b[6], FA_out[5], sum[6], FA_out[6]);
fulladd FA7  (a[7], b[7], FA_out[6], sum[7], c_out);
endmodule

module fulladd(a,b,c_in,sum,c_out);
  output sum;
  output c_out;
  input a;
  input b;
  input c_in;

  assign sum = (a & ~b & ~c_in) | (~a & ~b & c_in) |
    (a & b & c_in) | (~a & b & ~c_in);

  assign c_out = (a & c_in) | (a & b) | (b & c_in);
     
endmodule

module Rotateshifter(A,SB,out);

input[7:0] A;    // the number we will rotate
input[2:0] SB; //the selector bits
wire[7:0] X_out,Y_out,Z_out; // the outputs from the muxes and the output. They lead from one stage to the next: 
output[7:0] out;

eightbitmux X(A[7:0], {A[3:0],A[7:4]}, SB[2],X_out); //Shift by 4
eightbitmux Y(X_out[7:0], {X_out[5:0],X_out[7:6]}, SB[1], Y_out); //Shift by 2
eightbitmux Z(Y_out[7:0],{Y_out[6:0],Y_out[7]}, SB[0], Z_out); //Shift by 1

assign out = Z_out;

endmodule

module bigmux(a,b,c,d,e,f,g,h,select,out);

input[7:0] a,b,c,d,e,f,g,h;
input[2:0] select; // because it's 8:1
wire[7:0] T11,T12,T13,T14,T21,T22; //read tier one 1st position, tier 1 2nd position, etc. (preliminary outputs)
output[7:0] out; //last output

eightbitmux E6 (a, b, select[0], T11);
eightbitmux E5 (c, d, select[0], T12);
eightbitmux E4 (e, f, select[0], T13);
eightbitmux E3 (g, h, select[0], T14);
eightbitmux E2 (T11, T12, select[1], T21);
eightbitmux E1 (T13, T14, select[1], T22);
eightbitmux E0 (T21, T22, select[2], out); // this is the tier 3 AKA last 2:1

endmodule

module eightbitmux(a,b,select,out);   //this is the 8 bit 2:1 mux

input [7:0]  a,b;
input select;
output[7:0] out;

simplemux M7 (a[7], b[7], select, out[7]);
simplemux M6 (a[6], b[6], select, out[6]);
simplemux M5 (a[5], b[5], select, out[5]);
simplemux M4 (a[4], b[4], select, out[4]);
simplemux M3 (a[3], b[3], select, out[3]);
simplemux M2 (a[2], b[2], select, out[2]);
simplemux M1 (a[1], b[1], select, out[1]);
simplemux M0 (a[0], b[0], select, out[0]);
  
endmodule
  
module simplemux(a,b,select,out);
      
input a,b, select;
output out;

assign out = (a & !select) | (b & select);

endmodule

