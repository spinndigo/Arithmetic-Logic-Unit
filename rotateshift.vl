/*
Joseph Spinosa
Alright this is for the rotate shift left thing for the ALU, please see the diagram for illustration. There are going to be 3 8 bit 2:1 muxes 
called X,Y, and Z. X represents the shift 4 stage, Y the shift 2, and Z the shift 1. The whole thing takes in A which is 8-bit and SB which is 
3-bit. Assume the simple mux has already been declared:

MSB of the SB is for the shift 4 !!
*/

module Rotateshifter;

reg[7:0] A;    // the number we will rotate
reg[2:0] SB; //the selector bits
wire[7:0] X_out,Y_out,Z_out,out; // the outputs from the muxes and the output. They lead from one stage to the next: X->Y, Y->Z, Z->out

eightbitmux X(A[7:0], {A[3:0],A[7:4]}, SB[2],X_out); //Shift by 4
eightbitmux Y(X_out[7:0], {X_out[5:0],X_out[7:6]}, SB[1], Y_out); //Shift by 2
eightbitmux Z(Y_out[7:0],{Y_out[6:0],Y_out[7]}, SB[0], Z_out); //Shift by 1

assign out = Z_out;


initial
   begin
     $monitor($time,,"A=%b, SB=%b, out=%b", A,SB,out);

  #10 A=8'b01111111; SB=3'b000; 
  #10 A=8'b01111111; SB=3'b001; 
  #10 A=8'b00001110; SB=3'b010; 
  #10 A=8'b01111111; SB=3'b011; 
  #10 A=8'b00000010; SB=3'b100; 
  #10 A=8'b11111110; SB=3'b101; 
  #10 $finish;
   end
endmodule

module eightbitmux(a,b,select,out);

input[7:0] a,b;
input select;
output[7:0] out;

simplemux M7 (a[7], b[7], select, out[7]);
simplemux M6 (a[6], b[6], select, out[6]);
simplemux M5 (a[5], b[5], select, out[5]);
simplemux M4 (a[4], b[4], select, out[4]);
simplemux M3 (a[3], b[3], select, out[3]);
simplemux M2 (a[2], b[2], select, out[2]);
simplemux M1 (a[1], b[1], select, out[1]);
simplemux M0 (a[0], b[0], select, out[0]);

endmodule

module simplemux(a,b,select,out);

input a,b,select;
output out;


assign out = (a & !select) | (b & select);

endmodule

